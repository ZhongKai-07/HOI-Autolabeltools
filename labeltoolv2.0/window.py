# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QColor, QImage
import os
import cv2 as cv
import time

from PyQt5.QtWidgets import QMainWindow

from UI.MainWindow import Ui_MainWindow
from autolabel import detect
from libs.Common import Common


class MyWindow(QMainWindow, Ui_MainWindow):
    frame = 1
    newFrameDir = ''

    def __init__(self, parent=None):
        super(MyWindow, self).__init__(parent)
        styleFile = "./qrc/style.qss"
        style = Common.readQss(styleFile)
        self.setStyleSheet(style)
        self.setupUi(self)

        self.imageLabel = QtWidgets.QLabel(self.widget)
        self.pushButton.clicked.connect(self.clickInputFile)  # Slot Function
        self.preButton.clicked.connect(self.prevFrame)  # Click to turn to the previous frame
        self.nextButton.clicked.connect(self.nextFrame)  # Click to turn to the next frame

        # Click to select the label
        self.selectObject.currentTextChanged.connect(self.setObject)
        # Click to auto label
        self.pushButton_2.clicked.connect(self.detect_image)

    '''
    Input the video file
    '''
    def clickInputFile(self):

        # Get the video path
        inputFilePath, fileType = QtWidgets.QFileDialog.getOpenFileName(None, "Select File", "./",
                                                                        "All Files (*);;Text Files (*.mp4)")
        # Polish the video path so that cv2 library could successfully use it
        modifiedInputPath = inputFilePath.replace("\\", "/").replace('"', '').replace("'", "").strip()
        # Get the video
        videoCapture = cv.VideoCapture(modifiedInputPath)
        # Get the total number of the video
        totalFrameNumber = int(videoCapture.get(cv.CAP_PROP_FRAME_COUNT))
        self.totalFrameNumber = totalFrameNumber
        self.frameNumb.append(f"{self.frame}/{self.totalFrameNumber}")
        self.inputFilePath = inputFilePath
        self.getAllFrames()

    '''
    To get all frames of the video and store them in a specific directory
    '''
    def getAllFrames(self):
        # To get all frames of the video and store them in a specific directory
        img_dir = './Frames'  # image dir
        if not os.path.exists(img_dir):
            os.mkdir(img_dir)
        # To get the current time and create a new directory in the Frames dir
        currentTime = str(int(time.time()))
        currentDir = os.path.join(img_dir, currentTime)
        os.mkdir(currentDir)
        self.newFrameDir = currentDir
        videoCap = cv.VideoCapture(self.inputFilePath)  # Capture the video by opencv-python
        self.width = videoCap.get(cv.CAP_PROP_FRAME_WIDTH)
        self.height = videoCap.get(cv.CAP_PROP_FRAME_HEIGHT)
        frameCounter = 1  # The parameter that used for the image file name
        retval = False
        if videoCap.isOpened():
            retval = True
        while retval:
            retval, frame = videoCap.read()
            cv.imwrite(f"{currentDir}/{frameCounter}.jpg", frame)
            frameCounter += 1
            print(frameCounter)
            if frameCounter == self.totalFrameNumber:
                retval = False
        videoCap.release()
        self.loadFrame()
        self.showFrameInfo()

    '''
    load the frame from directory to the UI
    '''
    def loadFrame(self):
        image = QtGui.QPixmap(f"{self.newFrameDir}/{self.frame}.jpg")

        if image.width() >= image.height():
            # newImg = QtGui.QPixmap(f"{self.newFrameDir}/{self.frame}.jpg").scaled(640, 360, QtCore.Qt.KeepAspectRatio)
            newImg = QtGui.QPixmap(f"{self.newFrameDir}/{self.frame}.jpg")
            self.imageLabel.setGeometry(60, 60, 640, 360)
            self.imageLabel.setPixmap(newImg)
            self.imageLabel.setScaledContents(True)
        else:
            # newImg = QtGui.QPixmap(f"{self.newFrameDir}/{self.frame}.jpg").scaled(300, 450, QtCore.Qt.KeepAspectRatio)
            newImg = QtGui.QPixmap(f"{self.newFrameDir}/{self.frame}.jpg")
            self.imageLabel.setGeometry(230, 20, 300, 450)
            self.imageLabel.setPixmap(newImg)
            self.imageLabel.setScaledContents(True)

    '''
    click to the next frame
    '''
    def nextFrame(self):
        if self.frame + 1 <= self.totalFrameNumber:
            self.frame += 1
        self.loadFrame()
        self.frameNumb.setText(f"{self.frame}/{self.totalFrameNumber}")
        self.showFrameInfo()
        self.frameNumb.setAlignment(Qt.AlignCenter)


    '''
    click to the previous frame
    '''
    def prevFrame(self):
        if self.frame - 1 >= 1:
            self.frame -= 1
        self.loadFrame()
        self.frameNumb.setText(f"{self.frame}/{self.totalFrameNumber}")
        self.showFrameInfo()
        self.frameNumb.setAlignment(Qt.AlignCenter)


    '''
    show the information of the video and the frame
    eg.
        cars.mp4
        ./Frames\1661152708/2.jpg
        Total Frame: 97
        1920×1080
    '''
    def showFrameInfo(self):
        filename = self.inputFilePath.split("/")[-1]
        self.frameInfo.setText(
            f"{filename}\n"
            f"{self.newFrameDir}/{self.frame}.jpg\n"
            f"Total Frame: {self.totalFrameNumber}\n"
            f"{int(self.width)}×{int(self.height)}")


    '''
    get the path of the current frame that is shown on the UI
    '''
    def getNow_FramePath(self):
        str = f"{self.newFrameDir}/{self.frame}.jpg"
        return str


    '''
    get the selected label name
    '''
    def setObject(self):
        object = ""
        print(self.selectObject.currentText())
        if self.selectObject.currentText() != "--Select Object--":
            self.finishCue.setText("select label object: " + self.selectObject.currentText())
            object = self.selectObject.currentText()
        return object

    '''
    call the autolabel module to detect. It is like detect the object with the help with object detection model
    '''
    def detect_image(self):
        imgName = self.getNow_FramePath()
        if not hasattr(self, "captured"):
            print("There has no input images.")
            self.finishCue.setPlainText("There has no input images.")
        print("Start...")
        self.finishCue.setPlainText("Start label...")

        print(imgName.split("/")[-1])
        print("imgName: " + imgName)
        result = detect(imgName, self.setObject())
        self.finishCue.append("detecting...")
        print(result)
        self.finishCue.append(result)
        image = QtGui.QPixmap(result)
        if image.width() >= image.height():
            # newImg = QtGui.QPixmap(f"{self.newFrameDir}/{self.frame}.jpg").scaled(640, 360, QtCore.Qt.KeepAspectRatio)
            newImg = QtGui.QPixmap(image)
            self.imageLabel.setGeometry(60, 60, 640, 360)
            self.imageLabel.setPixmap(newImg)
            self.imageLabel.setScaledContents(True)
        else:
            # newImg = QtGui.QPixmap(f"{self.newFrameDir}/{self.frame}.jpg").scaled(300, 450, QtCore.Qt.KeepAspectRatio)
            newImg = QtGui.QPixmap(image)
            self.imageLabel.setGeometry(230, 20, 300, 450)
            self.imageLabel.setPixmap(newImg)
            self.imageLabel.setScaledContents(True)


        self.finishCue.append("finish label, output the yolo format dataset")
